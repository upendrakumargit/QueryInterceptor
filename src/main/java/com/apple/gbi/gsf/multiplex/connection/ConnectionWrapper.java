package com.apple.gbi.gsf.multiplex.connection;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;

import com.apple.gbi.gsf.multiplex.constant.MultiplexConstant;
import com.apple.gbi.gsf.multiplex.constant.ResultSetType;
import com.apple.gbi.gsf.multiplex.statement.CallableStatementWrapper;
import com.apple.gbi.gsf.multiplex.statement.PreparedStatementWrapper;
import com.apple.gbi.gsf.multiplex.statement.StatementWrapper;
import com.apple.gbi.gsf.multiplex.utils.MultiplexUtils;

public class ConnectionWrapper extends AbstractConnectionWrapper {

  private Properties info;

  private String qdbHint;

  protected int resultSetType;

  protected int resultSetConcurrency;

  public ConnectionWrapper(final Connection delegate) {
    super(delegate);
  }

  public ConnectionWrapper(final Connection delegate, final Properties info) {
    this(delegate);
    this.info = info;
    this.qdbHint = MultiplexUtils.getValue(info, MultiplexConstant.QDB_HINT);
    this.resultSetType =
        ResultSetType.valueOfType(MultiplexUtils.getValue(info, MultiplexConstant.RESULTSET_TYPE));
    this.resultSetConcurrency =
        ResultSetType.valueOfType(MultiplexUtils.getValue(info,
            MultiplexConstant.RESULTSET_CONCURRENCY));
    if (this.resultSetType != -1 && this.resultSetConcurrency == -1) {
      this.resultSetConcurrency = ResultSetType.CONCUR_READ_ONLY.getCode();
    }
  }

  public String getQdbHint() {
    return qdbHint;
  }

  private String getQdbHintSql(final String sql) {
    final String sqlWithQdbHint = MultiplexUtils.getQdbHintSql(sql, this.getQdbHint());
    System.out.println("Final QDB Connection Query :: " + sqlWithQdbHint);
    return sqlWithQdbHint;
  }

  @Override
  public Statement createStatement() throws SQLException {
    return new StatementWrapper(this.getDelegate().createStatement(), this.info);
  }

  @Override
  public PreparedStatement prepareStatement(String sql) throws SQLException {
    return new PreparedStatementWrapper(this.getDelegate().prepareStatement(getQdbHintSql(sql)));
  }

  @Override
  public CallableStatement prepareCall(String sql) throws SQLException {
    if (this.resultSetType != -1) {
      return new CallableStatementWrapper(this.getDelegate().prepareCall(getQdbHintSql(sql),
          this.resultSetType, this.resultSetConcurrency));
    }
    return new CallableStatementWrapper(this.getDelegate().prepareCall(getQdbHintSql(sql)));
  }

  @Override
  public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency)
      throws SQLException {
    return new PreparedStatementWrapper(this.getDelegate().prepareStatement(getQdbHintSql(sql),
        resultSetType, resultSetConcurrency));
  }

  @Override
  public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency)
      throws SQLException {
    return new CallableStatementWrapper(this.getDelegate().prepareCall(getQdbHintSql(sql),
        resultSetType, resultSetConcurrency));
  }

  @Override
  public PreparedStatement prepareStatement(String sql, int resultSetType,
      int resultSetConcurrency, int resultSetHoldability) throws SQLException {
    return new PreparedStatementWrapper(this.getDelegate().prepareStatement(getQdbHintSql(sql),
        resultSetType, resultSetConcurrency, resultSetHoldability));
  }

  @Override
  public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency,
      int resultSetHoldability) throws SQLException {
    return new CallableStatementWrapper(this.getDelegate().prepareCall(getQdbHintSql(sql),
        resultSetType, resultSetConcurrency, resultSetHoldability));
  }

  @Override
  public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
    return new PreparedStatementWrapper(this.getDelegate().prepareStatement(getQdbHintSql(sql),
        autoGeneratedKeys));
  }

  @Override
  public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
    return new PreparedStatementWrapper(this.getDelegate().prepareStatement(getQdbHintSql(sql),
        columnIndexes));
  }

  @Override
  public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
    return new PreparedStatementWrapper(this.getDelegate().prepareStatement(getQdbHintSql(sql),
        columnNames));
  }

}
